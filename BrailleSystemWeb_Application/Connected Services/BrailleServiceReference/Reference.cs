//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BrailleSystemWeb_Application.BrailleServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BrailleServiceReference.PrinterWebServiceSoap")]
    public interface PrinterWebServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CalculateCirclePerimeter", ReplyAction="*")]
        double CalculateCirclePerimeter(double radius);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CalculateCirclePerimeter", ReplyAction="*")]
        System.Threading.Tasks.Task<double> CalculateCirclePerimeterAsync(double radius);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CalculateRectanglePerimeter", ReplyAction="*")]
        double CalculateRectanglePerimeter(double length, double width);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CalculateRectanglePerimeter", ReplyAction="*")]
        System.Threading.Tasks.Task<double> CalculateRectanglePerimeterAsync(double length, double width);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CalculateTrianglePerimeter", ReplyAction="*")]
        double CalculateTrianglePerimeter(double side1, double side2, double side3);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CalculateTrianglePerimeter", ReplyAction="*")]
        System.Threading.Tasks.Task<double> CalculateTrianglePerimeterAsync(double side1, double side2, double side3);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface PrinterWebServiceSoapChannel : BrailleSystemWeb_Application.BrailleServiceReference.PrinterWebServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PrinterWebServiceSoapClient : System.ServiceModel.ClientBase<BrailleSystemWeb_Application.BrailleServiceReference.PrinterWebServiceSoap>, BrailleSystemWeb_Application.BrailleServiceReference.PrinterWebServiceSoap {
        
        public PrinterWebServiceSoapClient() {
        }
        
        public PrinterWebServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PrinterWebServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PrinterWebServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PrinterWebServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double CalculateCirclePerimeter(double radius) {
            return base.Channel.CalculateCirclePerimeter(radius);
        }
        
        public System.Threading.Tasks.Task<double> CalculateCirclePerimeterAsync(double radius) {
            return base.Channel.CalculateCirclePerimeterAsync(radius);
        }
        
        public double CalculateRectanglePerimeter(double length, double width) {
            return base.Channel.CalculateRectanglePerimeter(length, width);
        }
        
        public System.Threading.Tasks.Task<double> CalculateRectanglePerimeterAsync(double length, double width) {
            return base.Channel.CalculateRectanglePerimeterAsync(length, width);
        }
        
        public double CalculateTrianglePerimeter(double side1, double side2, double side3) {
            return base.Channel.CalculateTrianglePerimeter(side1, side2, side3);
        }
        
        public System.Threading.Tasks.Task<double> CalculateTrianglePerimeterAsync(double side1, double side2, double side3) {
            return base.Channel.CalculateTrianglePerimeterAsync(side1, side2, side3);
        }
    }
}
